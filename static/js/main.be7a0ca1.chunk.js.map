{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBar.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","props","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","_ref","map","user","i","components_Card","key","SearchBar","type","placeholder","onChange","searchChange","Scroll","console","log","style","overflowY","border","height","children","App","this","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBar","components_Scroll","components_CardList","Component","connect","state","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iPAIMA,EAAqB,CACzBC,YAAa,IAgBTC,EAAqB,CACzBC,WAAW,EACXC,OAAQ,GACRC,MAAO,4CCPMC,EAbF,SAACC,GAAU,IACdC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAMC,EAAOH,EAAPG,GACpB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sDACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAA1B,YAAwCO,IAAI,UACpDN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCIGS,EAZE,SAAAC,GAAgB,IAAbf,EAAae,EAAbf,OAClB,OACEO,EAAAC,EAAAC,cAAA,WAEIT,EAAOgB,IAAI,SAACC,EAAMC,GAChB,OAAOX,EAAAC,EAAAC,cAACU,EAAD,CAAMb,GAAIN,EAAOkB,GAAGZ,GAAIF,KAAMJ,EAAOkB,GAAGd,KAAMC,MAAOL,EAAOkB,GAAGb,MAAOe,IAAKF,QCE7EG,EARG,SAAClB,GACjB,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,+BAA+BY,KAAK,SAASC,YAAY,eAAeC,SAAUrB,EAAMsB,iBCMhGC,EATA,SAACvB,GAEd,OADAwB,QAAQC,IAAIzB,GAEVI,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UAClE7B,EAAM8B,WCyBPC,qMAGFC,KAAKhC,MAAMiC,mDAGJ,IAAAC,EACqDF,KAAKhC,MAAzDN,EADDwC,EACCxC,YAAayC,EADdD,EACcC,eAAgBtC,EAD9BqC,EAC8BrC,OAASD,EADvCsC,EACuCtC,UACxCwC,EAAiBvC,EAAOwC,OAAO,SAAAC,GACnC,OAAOA,EAAMrC,KAAKsC,cAAcC,SAAS9C,EAAY6C,iBAEvD,OAAO3C,EACLQ,EAAAC,EAAAC,cAAA,qBAEEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACmC,EAAD,CAAWnB,aAAca,IACzB/B,EAAAC,EAAAC,cAACoC,EAAD,KACEtC,EAAAC,EAAAC,cAACqC,EAAD,CAAU9C,OAAQuC,aAlBZQ,cA0BHC,cA9CS,SAACC,GACvB,MAAO,CAELpD,YAAaoD,EAAMC,aAAarD,YAChCG,OAAQiD,EAAME,cAAcnD,OAC5BD,UAAWkD,EAAME,cAAcpD,UAC/BE,MAAOgD,EAAME,cAAclD,QAIJ,SAACmD,GAC1B,MAAO,CAELd,eAAgB,SAACe,GAAD,OAAWD,GCrBAE,EDqBwBD,EAAME,OAAOC,MCpBlE7B,QAAQC,IAAI0B,GAEL,CACLhC,KCP+B,sBDQ/BmC,QAASH,KALiB,IAACA,GDsB3BlB,gBAAiB,kBAAMgB,ECbO,SAACA,GACjCA,EAAS,CAAE9B,KCXyB,2BDYpCoC,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIV,EAAS,CAAE9B,KCZS,yBDYqBmC,QAASK,MAC/DC,MAAM,SAAAC,GAAG,OAAIZ,EAAS,CAAE9B,KCXQ,wBDWqBmC,QAASO,WDwCpDhB,CAA6Cd,GG7CtD+B,SAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTb,KAAK,SAAAkB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9B,QACfyB,UAAUC,cAAcO,YAI1BvD,QAAQC,IACN,gHAKE6C,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBlD,QAAQC,IAAI,sCAGR6C,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,SAO5Bd,MAAM,SAAA9D,GACL0B,QAAQ1B,MAAM,4CAA6CA,eC1E3DoF,EAASC,yBAGTC,EAAcC,YAAgB,CAAEtC,aTdV,WAA6C,IAA5CD,EAA4CwC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApC7F,EAAoBgG,EAAgBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAGhE,OAFA9D,QAAQC,IAAIgE,EAAOtE,MAEXsE,EAAOtE,MACb,IOZ+B,sBPc7B,OAAOuE,OAAOC,OAAO,GAAI7C,EAAO,CAAEpD,YAAa+F,EAAOnC,UAExD,QACE,OAAOR,ISKuCE,cTKvB,WAA6C,IAA5CF,EAA4CwC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApC3F,EAAoB8F,EAAgBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACjE,OAAQG,EAAOtE,MACb,IO3BkC,yBP4BhC,OAAOuE,OAAOC,OAAO,GAAI7C,EAAO,CAAElD,WAAW,IAC/C,IO3BkC,yBP4BhC,OAAO8F,OAAOC,OAAO,GAAI7C,EAAO,CAAEjD,OAAQ4F,EAAOnC,QAAS1D,WAAW,IACvE,IO3BiC,wBP4B/B,OAAO8F,OAAOC,OAAO,GAAI7C,EAAO,CAAEhD,MAAO2F,EAAOnC,QAAS1D,WAAW,IACtE,QACE,OAAOkD,MSbP8C,EAAQC,YAAYT,EAAYU,YAAgBC,IAAgBb,IAGtEc,IAASC,OAAO7F,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CAAUN,MAAOA,GACfxF,EAAAC,EAAAC,cAAC6F,EAAD,OACWC,SAASC,eAAe,SDN9C,SAAkB/B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI+B,IAAIC,2BAAwBvC,OAAOC,UAC3CuC,SAAWxC,OAAOC,SAASuC,OAIvC,OAGFxC,OAAOyC,iBAAiB,OAAQ,WAC9B,IAAMpC,EAAK,GAAA5D,OAAM8F,2BAAN,sBAEPzC,GA6DV,SAAiCO,EAAOC,GAEtCf,MAAMc,GACHb,KAAK,SAAAC,GAGkB,MAApBA,EAASiD,SACuD,IAAhEjD,EAASkD,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CtC,UAAUC,cAAcsC,MAAMtD,KAAK,SAAAkB,GACjCA,EAAaqC,aAAavD,KAAK,WAC7BQ,OAAOC,SAAS+C,aAKpB5C,EAAgBC,EAAOC,KAG1BV,MAAM,WACLpC,QAAQC,IACN,mEAjFAwF,CAAwB5C,EAAOC,GAI/BC,UAAUC,cAAcsC,MAAMtD,KAAK,WACjChC,QAAQC,IACN,+GAMJ2C,EAAgBC,EAAOC,MCpB/BE","file":"static/js/main.be7a0ca1.chunk.js","sourcesContent":["// import action type \nimport { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\n\n// initial state (how state looks like)\nconst initialStateSearch = {\n  searchField: ''\n}\n//default balue\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  console.log(action.type);\n  // condition of actions\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      // return a new object \n      return Object.assign({}, state, { searchField: action.payload });\n    //target , sources ...\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true })\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: true })\n    default:\n      return state\n  }\n}","import React from 'react';\n\n\n\nconst Card = (props) => {\n  const { name, email,id } = props;\n  return (\n    <div className=\"tc bg-light-pink dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt='robot' />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return <Card id={robots[i].id} name={robots[i].name} email={robots[i].email} key={i} />\n        })\n      }\n    </div>\n  )\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchBar = (props) => {\n  return (\n    <div className='pa2'>\n      <input className='ba b--silver bg-hot-pink pa2' type='search' placeholder='seach robots' onChange={props.searchChange}/>\n    </div>\n  )\n}\n\nexport default SearchBar;","import React from 'react';\n\nconst Scroll = (props) => {\n  console.log(props);\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height:'800px' }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n// import connect method from react-redux\nimport { connect } from 'react-redux'\nimport CardList from '../components/CardList';\nimport SearchBar from '../components/SearchBar';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\n// import action \nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = (state) => {\n  return {\n    //state is all state stored in redux store\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n//dispatch is what trigger the actions\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // the event dispatchs action:setSearchField  \n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n\n  }\n}\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots , isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBar searchChange={onSearchChange} />\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\n// connect is to subscribe the store\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n              // what state listen to?  //what actions should listen to ? ","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\n\n// this is action creator\nexport const setSearchField = (text) => {\n  console.log(text);\n  // this is an action\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  }\n}\n\nexport const requestRobots = ()=> (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SERACH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//  import createStore method from redux\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import Porvider component from react-redux\nimport { Provider } from 'react-redux';\n// an middleware helps debugger\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n// import the reducer\nimport { searchRobots, requestRobots } from './reducers'\n\nimport App from './containers/App';\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger(); \n\n// create store with reducer,combine 2 reducers to 1 root  \nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger))\n\n\nReactDOM.render(<Provider store={store}>\n                  <App />\n                </Provider>, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}